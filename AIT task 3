# -*- coding: utf-8 -*-
"""ait task 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-WYylFOIaCaKcP8IvMLbv_Y5xoxEfSaJ
"""

def aStarAlgo(start_node, stop_node):
    # open_set holds nodes to be evaluated
    open_set = set([start_node])
    # closed_set holds nodes that have been evaluated
    closed_set = set()

    # g holds the actual distance (cost) from the starting node
    g = {}
    # parents holds the map for path reconstruction
    parents = {}

    # Distance of starting node from itself is zero
    g[start_node] = 0

    # Start_node is the root, set to its own parent for path termination
    parents[start_node] = start_node

    while len(open_set) > 0:
        n = None

        # Find the node 'n' in the open_set with the lowest f() value (g + h)
        for v in open_set:
            if n is None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v

        # If goal reached or no path exists
        if n == stop_node or n is None:
            break

        # Process neighbors of the current node 'n'
        for m, weight in get_neighbors(n):

            # Case 1: Node 'm' is new (not in open_set or closed_set)
            if m not in open_set and m not in closed_set:
                open_set.add(m)
                parents[m] = n
                g[m] = g[n] + weight

            # Case 2: Node 'm' is known, check for a shorter path through 'n'
            else:
                if g[m] > g[n] + weight:
                    # Update g(m) and parent
                    g[m] = g[n] + weight
                    parents[m] = n

                    # If 'm' was in closed_set, move it back to open_set for re-evaluation
                    if m in closed_set:
                        closed_set.remove(m)
                        open_set.add(m)

        # Move 'n' from open_set to closed_set after inspecting all its neighbors
        open_set.remove(n)
        closed_set.add(n)

    # Path Reconstruction
    if n is None:
        print('Path does not exist!')
        return None

    if n == stop_node:
        path = []
        # Backtrack from stop_node to start_node
        while parents[n] != n:
            path.append(n)
            n = parents[n]

        path.append(start_node)
        path.reverse()
        print('Path found:', path)
        return path

    print('Path does not exist!')
    return None

# define function to return neighbors and their distances from the passed node
def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    else:
        return [] # Return empty list if node not found

# function to return heuristic distance for all nodes
def heuristic(n):
    h_dist = {
        'A': 11,
        'B': 6,
        'C': 5,
        'D': 7,
        'E': 3,
        'F': 6,
        'G': 5,
        'H': 3,
        'I': 1,
        'J': 0
    }
    return h_dist.get(n, 0) # Use .get() with default to prevent KeyError

# Describe your graph here
Graph_nodes = {
    'A': [('B', 6), ('F', 3)],
    'B': [('A', 6), ('C', 3), ('D', 2)],
    'C': [('B', 3), ('D', 1), ('E', 5)],
    'D': [('B', 2), ('C', 1), ('E', 8)],
    'E': [('C', 5), ('D', 8), ('I', 5), ('J', 5)],
    'F': [('A', 3), ('G', 1), ('H', 7)],
    'G': [('F', 1), ('I', 3)],
    'H': [('F', 7), ('I', 2)],
    'I': [('E', 5), ('G', 3), ('H', 2), ('J', 3)],
}

print("Following is the A* Algorithm:")
aStarAlgo('A', 'J')
