# -*- coding: utf-8 -*-
"""ait task 8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-WYylFOIaCaKcP8IvMLbv_Y5xoxEfSaJ
"""

# Global variable N for the board size
N = 4

def printSolution(board):
    """Prints the final arrangement of the queens (1s) on the board."""
    for i in range(N):
        for j in range(N):
            print (board[i][j], end=' ')
        print()

def isSafe(board, row, col):
    """Checks if a queen can be safely placed at board[row][col]."""

    # Check this row on the left side
    # No need to check right, up, or down since the algorithm places queens column by column.
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on the left side (row decreases, column decreases)
    # The zip function iterates two ranges simultaneously:
    # rows from current row up to 0, and columns from current column up to 0.
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on the left side (row increases, column decreases)
    # rows from current row up to N, and columns from current column up to 0.
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solveNQUtil(board, col):
    """A recursive utility function to solve the N Queen problem."""

    # Base Case: If all queens are placed (all columns are filled)
    if col >= N:
        return True

    # Consider this column (col) and try placing a queen in all rows (i)
    for i in range(N):

        if isSafe(board, i, col):
            # Place the queen
            board[i][col] = 1

            # Recur to place the queen in the next column
            if solveNQUtil(board, col + 1) == True:
                return True

            # BACKTRACK: If placing the queen doesn't lead to a solution, remove it (reset to 0)
            board[i][col] = 0

    # If the queen cannot be placed in any row in this column, return False
    return False

def solveNQ():
    """Initializes the board and starts the N-Queens solver."""

    # Initialize the N x N board with zeros
    board = [ [0 for _ in range(N)] for _ in range(N) ]

    # Start solving from the first column (col=0)
    if solveNQUtil(board, 0) == False:
        print ("Solution does not exist")
        return False

    # If a solution is found, print the final board
    printSolution(board)
    return True

# Execute the solver
solveNQ()
