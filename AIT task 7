# -*- coding: utf-8 -*-
"""ait task 7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-WYylFOIaCaKcP8IvMLbv_Y5xoxEfSaJ
"""

# --- Operators (Actions) ---

def move(subject, x1, x2):
    """Represents moving an entity (Monkey or Box) from location x1 to x2."""
    return f"Move {subject} from {x1} to {x2}"

def push_box(x1, x2):
    """Represents pushing the box from location x1 to x2 while the monkey is on the ground."""
    return f"Push box from {x1} to {x2}"

def climb_box(x):
    """Represents the monkey climbing onto the box at location x."""
    return f"Climb box at {x}"

def have_banana(x):
    """Represents the monkey grabbing the banana at location x (must be on the box)."""
    return f"Have banana at {x}"

# --- State Definitions ---

# Use constants for locations for clarity
BANANA_POS = 'B'  # Location of the high banana
BOX_POS = 'X'     # Location where the box must end up

# Initial State:
# Monkey starts at location 0 (Down). Banana is high at B. Box is at 2.
initial_state = {
    'monkeyAt': '0',
    'monkeyLevel': 'Down',
    'bananaHeight': 'High',
    'bananaAt': BANANA_POS,
    'boxAt': '2'
}

# Goal State: Monkey has the banana
goal_state = {
    'hasBanana': True
}

# --- Planning Algorithm (Corrected Logic) ---

def plan_actions(initial_state, goal_state):
    actions = []

    # Check current positions
    monkey_loc = initial_state['monkeyAt']
    box_loc = initial_state['boxAt']
    banana_loc = initial_state['bananaAt']

    # Step 1: Move the monkey to the box location (boxAt: 2)
    if monkey_loc != box_loc:
        actions.append(move('Monkey', monkey_loc, box_loc))
        monkey_loc = box_loc

    # Step 2: Push the box to the banana location (boxAt: B)
    if box_loc != banana_loc:
        actions.append(push_box(box_loc, banana_loc))
        box_loc = banana_loc
        # Monkey is assumed to move with the box on the ground
        monkey_loc = banana_loc

    # Step 3: Climb the box
    actions.append(climb_box(monkey_loc))

    # Step 4: Grab the banana
    actions.append(have_banana(monkey_loc))

    return actions

# --- Execution ---
actions = plan_actions(initial_state, goal_state)

# Print the resulting plan
print("Plan:")
for action in actions:
    print(action)
